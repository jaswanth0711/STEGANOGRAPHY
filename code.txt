from PIL import Image
import numpy as np

def message_to_binary(message):
    if type(message) == str:
        return ''.join([format(ord(char), "08b") for char in message])
    elif type(message) == bytes or type(message) == np.ndarray:
        return [format(i, "08b") for i in message]
    elif type(message) == int or type(message) == np.uint8:
        return format(message, "08b")
    else:
        raise TypeError("Input type not supported")

def binary_to_message(binary):
    binary_values = binary.split(' ')
    ascii_characters = [chr(int(bv, 2)) for bv in binary_values]
    return ''.join(ascii_characters)

def hide_data(image_path, secret_message, output_image_path):
    image = Image.open(image_path)
    image_data = np.array(image)
    binary_secret_msg = message_to_binary(secret_message) + message_to_binary("#####")  # Adding delimiter to identify end of message
    
    data_index = 0
    binary_secret_msg_len = len(binary_secret_msg)
    
    for values in image_data:
        for pixel in values:
            r, g, b = message_to_binary(pixel[0]), message_to_binary(pixel[1]), message_to_binary(pixel[2])
            if data_index < binary_secret_msg_len:
                pixel[0] = int(r[:-1] + binary_secret_msg[data_index], 2)
                data_index += 1
            if data_index < binary_secret_msg_len:
                pixel[1] = int(g[:-1] + binary_secret_msg[data_index], 2)
                data_index += 1
            if data_index < binary_secret_msg_len:
                pixel[2] = int(b[:-1] + binary_secret_msg[data_index], 2)
                data_index += 1
            if data_index >= binary_secret_msg_len:
                break
    
    encoded_image = Image.fromarray(image_data)
    encoded_image.save(output_image_path)
    print("Data hidden successfully in", output_image_path)

def reveal_data(image_path):
    image = Image.open(image_path)
    image_data = np.array(image)
    
    binary_data = ""
    for values in image_data:
        for pixel in values:
            r, g, b = message_to_binary(pixel[0]), message_to_binary(pixel[1]), message_to_binary(pixel[2])
            binary_data += r[-1]
            binary_data += g[-1]
            binary_data += b[-1]
    
    all_bytes = [binary_data[i:i+8] for i in range(0, len(binary_data), 8)]
    decoded_data = ""
    for byte in all_bytes:
        decoded_data += chr(int(byte, 2))
        if decoded_data[-5:] == "#####":
            break
    
    return decoded_data[:-5]

# Example usage:
# Hide the message
hide_data("input_image.png", "This is a secret message", "output_image.png")

# Reveal the message
hidden_message = reveal_data("output_image.png")
print("Hidden message:", hidden_message)